// Code generated by MockGen. DO NOT EDIT.
// Source: internal/export/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/export/interface.go -destination=./test/mocks/export/interface.go -package=mocks_export
//

// Package mocks_export is a generated GoMock package.
package mocks_export

import (
	context "context"
	reflect "reflect"

	export "github.com/threatflux/libgo/internal/export"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CancelJob mocks base method.
func (m *MockManager) CancelJob(ctx context.Context, jobID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJob", ctx, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelJob indicates an expected call of CancelJob.
func (mr *MockManagerMockRecorder) CancelJob(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJob", reflect.TypeOf((*MockManager)(nil).CancelJob), ctx, jobID)
}

// CreateExportJob mocks base method.
func (m *MockManager) CreateExportJob(ctx context.Context, vmName string, params export.Params) (*export.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExportJob", ctx, vmName, params)
	ret0, _ := ret[0].(*export.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExportJob indicates an expected call of CreateExportJob.
func (mr *MockManagerMockRecorder) CreateExportJob(ctx, vmName, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExportJob", reflect.TypeOf((*MockManager)(nil).CreateExportJob), ctx, vmName, params)
}

// GetJob mocks base method.
func (m *MockManager) GetJob(ctx context.Context, jobID string) (*export.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", ctx, jobID)
	ret0, _ := ret[0].(*export.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockManagerMockRecorder) GetJob(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockManager)(nil).GetJob), ctx, jobID)
}

// ListJobs mocks base method.
func (m *MockManager) ListJobs(ctx context.Context) ([]*export.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", ctx)
	ret0, _ := ret[0].([]*export.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockManagerMockRecorder) ListJobs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockManager)(nil).ListJobs), ctx)
}
