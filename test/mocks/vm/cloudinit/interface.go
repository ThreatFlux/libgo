// Code generated by MockGen. DO NOT EDIT.
// Source: internal/vm/cloudinit/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/vm/cloudinit/interface.go -destination=./test/mocks/vm/cloudinit/interface.go -package=mocks_cloudinit
//

// Package mocks_cloudinit is a generated GoMock package.
package mocks_cloudinit

import (
	context "context"
	reflect "reflect"

	vm "github.com/threatflux/libgo/internal/models/vm"
	cloudinit "github.com/threatflux/libgo/internal/vm/cloudinit"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GenerateISO mocks base method.
func (m *MockManager) GenerateISO(ctx context.Context, config cloudinit.CloudInitConfig, outputPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateISO", ctx, config, outputPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateISO indicates an expected call of GenerateISO.
func (mr *MockManagerMockRecorder) GenerateISO(ctx, config, outputPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateISO", reflect.TypeOf((*MockManager)(nil).GenerateISO), ctx, config, outputPath)
}

// GenerateMetaData mocks base method.
func (m *MockManager) GenerateMetaData(params vm.VMParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMetaData", params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateMetaData indicates an expected call of GenerateMetaData.
func (mr *MockManagerMockRecorder) GenerateMetaData(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMetaData", reflect.TypeOf((*MockManager)(nil).GenerateMetaData), params)
}

// GenerateNetworkConfig mocks base method.
func (m *MockManager) GenerateNetworkConfig(params vm.VMParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNetworkConfig", params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateNetworkConfig indicates an expected call of GenerateNetworkConfig.
func (mr *MockManagerMockRecorder) GenerateNetworkConfig(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNetworkConfig", reflect.TypeOf((*MockManager)(nil).GenerateNetworkConfig), params)
}

// GenerateUserData mocks base method.
func (m *MockManager) GenerateUserData(params vm.VMParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUserData", params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUserData indicates an expected call of GenerateUserData.
func (mr *MockManagerMockRecorder) GenerateUserData(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUserData", reflect.TypeOf((*MockManager)(nil).GenerateUserData), params)
}
