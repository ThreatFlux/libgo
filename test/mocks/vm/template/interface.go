// Code generated by MockGen. DO NOT EDIT.
// Source: internal/vm/template/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/vm/template/interface.go -destination=./test/mocks/vm/template/interface.go -package=mocks_template
//

// Package mocks_template is a generated GoMock package.
package mocks_template

import (
	reflect "reflect"

	vm "github.com/threatflux/libgo/internal/models/vm"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ApplyTemplate mocks base method.
func (m *MockManager) ApplyTemplate(templateName string, params *vm.VMParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyTemplate", templateName, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyTemplate indicates an expected call of ApplyTemplate.
func (mr *MockManagerMockRecorder) ApplyTemplate(templateName, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyTemplate", reflect.TypeOf((*MockManager)(nil).ApplyTemplate), templateName, params)
}

// GetTemplate mocks base method.
func (m *MockManager) GetTemplate(name string) (*vm.VMParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", name)
	ret0, _ := ret[0].(*vm.VMParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockManagerMockRecorder) GetTemplate(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockManager)(nil).GetTemplate), name)
}

// ListTemplates mocks base method.
func (m *MockManager) ListTemplates() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplates")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplates indicates an expected call of ListTemplates.
func (mr *MockManagerMockRecorder) ListTemplates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplates", reflect.TypeOf((*MockManager)(nil).ListTemplates))
}
