// Code generated by MockGen. DO NOT EDIT.
// Source: internal/libvirt/network/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/libvirt/network/interface.go -destination=./test/mocks/libvirt/network/interface.go -package=mocks_network
//

// Package mocks_network is a generated GoMock package.
package mocks_network

import (
	context "context"
	reflect "reflect"

	libvirt "github.com/digitalocean/go-libvirt"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockManager) Delete(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockManagerMockRecorder) Delete(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockManager)(nil).Delete), ctx, name)
}

// EnsureExists mocks base method.
func (m *MockManager) EnsureExists(ctx context.Context, name, bridgeName, cidr string, dhcp bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureExists", ctx, name, bridgeName, cidr, dhcp)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureExists indicates an expected call of EnsureExists.
func (mr *MockManagerMockRecorder) EnsureExists(ctx, name, bridgeName, cidr, dhcp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureExists", reflect.TypeOf((*MockManager)(nil).EnsureExists), ctx, name, bridgeName, cidr, dhcp)
}

// FindIPByMAC mocks base method.
func (m *MockManager) FindIPByMAC(ctx context.Context, networkName, mac string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIPByMAC", ctx, networkName, mac)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIPByMAC indicates an expected call of FindIPByMAC.
func (mr *MockManagerMockRecorder) FindIPByMAC(ctx, networkName, mac any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIPByMAC", reflect.TypeOf((*MockManager)(nil).FindIPByMAC), ctx, networkName, mac)
}

// Get mocks base method.
func (m *MockManager) Get(ctx context.Context, name string) (*libvirt.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(*libvirt.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockManagerMockRecorder) Get(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockManager)(nil).Get), ctx, name)
}

// GetDHCPLeases mocks base method.
func (m *MockManager) GetDHCPLeases(ctx context.Context, name string) ([]libvirt.NetworkDhcpLease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDHCPLeases", ctx, name)
	ret0, _ := ret[0].([]libvirt.NetworkDhcpLease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDHCPLeases indicates an expected call of GetDHCPLeases.
func (mr *MockManagerMockRecorder) GetDHCPLeases(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHCPLeases", reflect.TypeOf((*MockManager)(nil).GetDHCPLeases), ctx, name)
}

// MockXMLBuilder is a mock of XMLBuilder interface.
type MockXMLBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockXMLBuilderMockRecorder
	isgomock struct{}
}

// MockXMLBuilderMockRecorder is the mock recorder for MockXMLBuilder.
type MockXMLBuilderMockRecorder struct {
	mock *MockXMLBuilder
}

// NewMockXMLBuilder creates a new mock instance.
func NewMockXMLBuilder(ctrl *gomock.Controller) *MockXMLBuilder {
	mock := &MockXMLBuilder{ctrl: ctrl}
	mock.recorder = &MockXMLBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXMLBuilder) EXPECT() *MockXMLBuilderMockRecorder {
	return m.recorder
}

// BuildNetworkXML mocks base method.
func (m *MockXMLBuilder) BuildNetworkXML(name, bridgeName, cidr string, dhcp bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildNetworkXML", name, bridgeName, cidr, dhcp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildNetworkXML indicates an expected call of BuildNetworkXML.
func (mr *MockXMLBuilderMockRecorder) BuildNetworkXML(name, bridgeName, cidr, dhcp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildNetworkXML", reflect.TypeOf((*MockXMLBuilder)(nil).BuildNetworkXML), name, bridgeName, cidr, dhcp)
}
