// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth/jwt/generator.go
//
// Generated by this command:
//
//	mockgen -source=internal/auth/jwt/generator.go -destination=./test/mocks/auth/jwt_generator.go -package=mocks_auth
//

// Package mocks_auth is a generated GoMock package.
package mocks_auth

import (
	reflect "reflect"
	time "time"

	jwt "github.com/threatflux/libgo/internal/auth/jwt"
	user "github.com/threatflux/libgo/internal/models/user"
	gomock "go.uber.org/mock/gomock"
)

// MockGenerator is a mock of Generator interface.
type MockGenerator struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator.
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance.
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockGenerator) Generate(arg0 *user.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockGeneratorMockRecorder) Generate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockGenerator)(nil).Generate), arg0)
}

// GenerateWithExpiration mocks base method.
func (m *MockGenerator) GenerateWithExpiration(arg0 *user.User, expiration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWithExpiration", arg0, expiration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateWithExpiration indicates an expected call of GenerateWithExpiration.
func (mr *MockGeneratorMockRecorder) GenerateWithExpiration(arg0, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWithExpiration", reflect.TypeOf((*MockGenerator)(nil).GenerateWithExpiration), arg0, expiration)
}

// Parse mocks base method.
func (m *MockGenerator) Parse(tokenString string) (*jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", tokenString)
	ret0, _ := ret[0].(*jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockGeneratorMockRecorder) Parse(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockGenerator)(nil).Parse), tokenString)
}
