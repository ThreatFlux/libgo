// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth/user/service_interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/auth/user/service_interface.go -destination=./test/mocks/auth/service_interface.go -package=mocks_auth
//

// Package mocks_auth is a generated GoMock package.
package mocks_auth

import (
	context "context"
	reflect "reflect"

	user "github.com/threatflux/libgo/internal/auth/user"
	user0 "github.com/threatflux/libgo/internal/models/user"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockService) Authenticate(ctx context.Context, username, password string) (*user0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, username, password)
	ret0, _ := ret[0].(*user0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockServiceMockRecorder) Authenticate(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockService)(nil).Authenticate), ctx, username, password)
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, username, password, email string, roles []string) (*user0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, username, password, email, roles)
	ret0, _ := ret[0].(*user0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, username, password, email, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, username, password, email, roles)
}

// Delete mocks base method.
func (m *MockService) Delete(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, userID)
}

// GetByID mocks base method.
func (m *MockService) GetByID(ctx context.Context, id string) (*user0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*user0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockService)(nil).GetByID), ctx, id)
}

// GetByUsername mocks base method.
func (m *MockService) GetByUsername(ctx context.Context, username string) (*user0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(*user0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockServiceMockRecorder) GetByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockService)(nil).GetByUsername), ctx, username)
}

// HasPermission mocks base method.
func (m *MockService) HasPermission(ctx context.Context, userID, permission string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermission", ctx, userID, permission)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPermission indicates an expected call of HasPermission.
func (mr *MockServiceMockRecorder) HasPermission(ctx, userID, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*MockService)(nil).HasPermission), ctx, userID, permission)
}

// InitializeDefaultUsers mocks base method.
func (m *MockService) InitializeDefaultUsers(ctx context.Context, defaultUsers []user.DefaultUserConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeDefaultUsers", ctx, defaultUsers)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeDefaultUsers indicates an expected call of InitializeDefaultUsers.
func (mr *MockServiceMockRecorder) InitializeDefaultUsers(ctx, defaultUsers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeDefaultUsers", reflect.TypeOf((*MockService)(nil).InitializeDefaultUsers), ctx, defaultUsers)
}

// List mocks base method.
func (m *MockService) List(ctx context.Context) ([]*user0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*user0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServiceMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockService)(nil).List), ctx)
}

// LoadUser mocks base method.
func (m *MockService) LoadUser(u *user0.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadUser indicates an expected call of LoadUser.
func (mr *MockServiceMockRecorder) LoadUser(u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUser", reflect.TypeOf((*MockService)(nil).LoadUser), u)
}

// Update mocks base method.
func (m *MockService) Update(ctx context.Context, userID string, updateFunc func(*user0.User) error) (*user0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userID, updateFunc)
	ret0, _ := ret[0].(*user0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(ctx, userID, updateFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, userID, updateFunc)
}
