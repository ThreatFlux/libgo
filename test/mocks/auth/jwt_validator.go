// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth/jwt/validator.go
//
// Generated by this command:
//
//	mockgen -source=internal/auth/jwt/validator.go -destination=./test/mocks/auth/jwt_validator.go -package=mocks_auth
//

// Package mocks_auth is a generated GoMock package.
package mocks_auth

import (
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	jwt0 "github.com/threatflux/libgo/internal/auth/jwt"
	gomock "go.uber.org/mock/gomock"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockValidator) Validate(tokenString string) (*jwt0.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", tokenString)
	ret0, _ := ret[0].(*jwt0.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorMockRecorder) Validate(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), tokenString)
}

// ValidateWithClaims mocks base method.
func (m *MockValidator) ValidateWithClaims(tokenString string, claims jwt.Claims) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateWithClaims", tokenString, claims)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateWithClaims indicates an expected call of ValidateWithClaims.
func (mr *MockValidatorMockRecorder) ValidateWithClaims(tokenString, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateWithClaims", reflect.TypeOf((*MockValidator)(nil).ValidateWithClaims), tokenString, claims)
}
