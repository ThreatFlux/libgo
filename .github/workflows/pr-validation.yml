name: PR Validation

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  pull-requests: write
  statuses: write

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Validate PR Title
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title;
            
            // Conventional commit format: type(scope): description
            // Types: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert
            const conventionalCommitRegex = /^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?: .{1,50}/;
            
            if (!conventionalCommitRegex.test(title)) {
              // Post comment with guidance
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## ❌ PR Title Validation Failed
            
            The PR title doesn't follow conventional commit format.
            
            **Expected format:** \`type(scope): description\`
            
            **Valid types:**
            - \`feat\`: New feature
            - \`fix\`: Bug fix  
            - \`docs\`: Documentation changes
            - \`style\`: Code style changes (formatting, etc.)
            - \`refactor\`: Code refactoring
            - \`perf\`: Performance improvements
            - \`test\`: Adding or updating tests
            - \`chore\`: Maintenance tasks
            - \`ci\`: CI/CD changes
            - \`build\`: Build system changes
            - \`revert\`: Reverting changes
            
            **Examples:**
            - \`feat: add user authentication\`
            - \`fix(api): resolve JWT token validation\`
            - \`docs: update API documentation\`
            - \`refactor(auth): simplify user service\`
            
            **Current title:** \`${title}\`
            
            Please update your PR title to follow this format.`
              });
              
              // Set status check
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: 'failure',
                context: 'PR Title Validation',
                description: 'PR title must follow conventional commit format'
              });
              
              core.setFailed('PR title validation failed');
            } else {
              // Set success status
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: 'success',
                context: 'PR Title Validation',
                description: 'PR title follows conventional commit format'
              });
              
              console.log('✅ PR title validation passed');
            }

      - name: Validate PR Description
        uses: actions/github-script@v7
        with:
          script: |
            const description = context.payload.pull_request.body || '';
            const minLength = 50;
            
            if (description.length < minLength) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## ⚠️ PR Description Too Brief
            
            The PR description is quite short (${description.length} characters). Consider adding more details about:
            
            - **What** changes are being made
            - **Why** these changes are necessary  
            - **How** the changes work
            - **Testing** that was performed
            - **Breaking changes** (if any)
            
            A good PR description helps reviewers understand the context and makes the review process more efficient.
            
            **Minimum recommended length:** ${minLength} characters`
              });
              
              console.log('⚠️ PR description is brief but not blocking');
            } else {
              console.log('✅ PR description validation passed');
            }